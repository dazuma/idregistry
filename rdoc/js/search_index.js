var search_data = {"index":{"searchIndex":["idregistry","configuration","anonymoustype","configurationlockederror","idregistryerror","illegalconfigurationerror","objectkeyerror","patternadder","railtie","configuration","registry","registrymiddleware","clearregistry","spawnregistry","utils","add()","add_category()","add_convenience_method()","add_pattern()","all_categories()","all_convenience_methods()","all_patterns()","all_types()","call()","categories()","clear()","clear()","clear_registry()","config()","create()","delete()","delete_category()","delete_category()","delete_convenience_method()","delete_pattern()","delete_type()","get()","has_category?()","has_convenience_method?()","has_pattern?()","has_type?()","include?()","lock()","locked?()","lookup()","matches?()","new()","new()","new()","objects_in_category()","pattern()","patterns_for_type()","post()","post()","pre()","pre()","registry()","rekey()","size()","spawn_registry()","spawn_registry()","spawn_registry()","to_generate_object()","to_generate_tuple()","tuples_for()","tuples_in_category()","type()","type_for_pattern()","history","idregistry","readme"],"longSearchIndex":["idregistry","idregistry::configuration","idregistry::configuration::anonymoustype","idregistry::configurationlockederror","idregistry::idregistryerror","idregistry::illegalconfigurationerror","idregistry::objectkeyerror","idregistry::patternadder","idregistry::railtie","idregistry::railtie::configuration","idregistry::registry","idregistry::registrymiddleware","idregistry::registrymiddleware::clearregistry","idregistry::registrymiddleware::spawnregistry","idregistry::utils","idregistry::registry#add()","idregistry::configuration#add_category()","idregistry::configuration#add_convenience_method()","idregistry::configuration#add_pattern()","idregistry::configuration#all_categories()","idregistry::configuration#all_convenience_methods()","idregistry::configuration#all_patterns()","idregistry::configuration#all_types()","idregistry::registrymiddleware#call()","idregistry::registry#categories()","idregistry::configuration#clear()","idregistry::registry#clear()","idregistry::railtie::configuration#clear_registry()","idregistry::registry#config()","idregistry::create()","idregistry::registry#delete()","idregistry::configuration#delete_category()","idregistry::registry#delete_category()","idregistry::configuration#delete_convenience_method()","idregistry::configuration#delete_pattern()","idregistry::configuration#delete_type()","idregistry::registry#get()","idregistry::configuration#has_category?()","idregistry::configuration#has_convenience_method?()","idregistry::configuration#has_pattern?()","idregistry::configuration#has_type?()","idregistry::registry#include?()","idregistry::configuration#lock()","idregistry::configuration#locked?()","idregistry::registry#lookup()","idregistry::utils::matches?()","idregistry::registrymiddleware::new()","idregistry::registrymiddleware::clearregistry::new()","idregistry::registrymiddleware::spawnregistry::new()","idregistry::registry#objects_in_category()","idregistry::patternadder#pattern()","idregistry::configuration#patterns_for_type()","idregistry::registrymiddleware::clearregistry#post()","idregistry::registrymiddleware::spawnregistry#post()","idregistry::registrymiddleware::clearregistry#pre()","idregistry::registrymiddleware::spawnregistry#pre()","idregistry::configuration#registry()","idregistry::registry#rekey()","idregistry::registry#size()","idregistry::configuration#spawn_registry()","idregistry::railtie::configuration#spawn_registry()","idregistry::registry#spawn_registry()","idregistry::patternadder#to_generate_object()","idregistry::patternadder#to_generate_tuple()","idregistry::registry#tuples_for()","idregistry::registry#tuples_in_category()","idregistry::patternadder#type()","idregistry::configuration#type_for_pattern()","","",""],"info":[["IDRegistry","","IDRegistry.html","","<p>IDRegistry is a generic object generator and identity map for Ruby.\n"],["IDRegistry::Configuration","","IDRegistry/Configuration.html","","<p>A registry configuration.\n<p>Access this API by calling the configuration method of a registry.\nConceptually …\n"],["IDRegistry::Configuration::AnonymousType","","IDRegistry/Configuration/AnonymousType.html","","<p>Object types that aren’t explicitly provided will be assigned anonymous\ntypes that are instances of this …\n"],["IDRegistry::ConfigurationLockedError","","IDRegistry/ConfigurationLockedError.html","","<p>Raised if you attempt to modify the configuration of a registry for which\nthe configuration has been …\n"],["IDRegistry::IDRegistryError","","IDRegistry/IDRegistryError.html","","<p>Base class for IDRegistry exceptions\n"],["IDRegistry::IllegalConfigurationError","","IDRegistry/IllegalConfigurationError.html","","<p>Raised if you attempt to make an illegal modification to a configuration.\n"],["IDRegistry::ObjectKeyError","","IDRegistry/ObjectKeyError.html","","<p>Raised if you attempt to add a nil object to the registry, or if you add an\nobject that is already present …\n"],["IDRegistry::PatternAdder","","IDRegistry/PatternAdder.html","","<p>This is the DSL available within the block passed to\nConfiguration#add_pattern.\n"],["IDRegistry::Railtie","","IDRegistry/Railtie.html","","<p>This railtie installs and configures a middleware that helps you manage\nregistries around Rails requests. …\n"],["IDRegistry::Railtie::Configuration","","IDRegistry/Railtie/Configuration.html","","<p>Configuration options. These are methods on config.idregistry.\n"],["IDRegistry::Registry","","IDRegistry/Registry.html","","<p>A registry object.\n"],["IDRegistry::RegistryMiddleware","","IDRegistry/RegistryMiddleware.html","","<p>A Rack middleware that manages registries around a request.\n<p>Configure this middleware with a set of registry-related …\n"],["IDRegistry::RegistryMiddleware::ClearRegistry","","IDRegistry/RegistryMiddleware/ClearRegistry.html","","<p>A registry task that clears a registry at the end of a request.\n<p>You may also provide an optional condition …\n"],["IDRegistry::RegistryMiddleware::SpawnRegistry","","IDRegistry/RegistryMiddleware/SpawnRegistry.html","","<p>A registry task that spawns a registry scoped to this request.\n<p>You must provide a locked registry configuration …\n"],["IDRegistry::Utils","","IDRegistry/Utils.html","","<p>A set of general utility methods for the implementation. Clients may also\nhave occasion to use these …\n"],["add","IDRegistry::Registry","IDRegistry/Registry.html#method-i-add","(type_, object_)","<p>Add the given object to the registry. You must specify the type of object,\nwhich is used to determine …\n"],["add_category","IDRegistry::Configuration","IDRegistry/Configuration.html#method-i-add_category","(category_, pattern_, indexes_=[])","<p>Add a category type.\n<p>You must provide a category type name, a pattern that recognizes tuples\nthat should …\n"],["add_convenience_method","IDRegistry::Configuration","IDRegistry/Configuration.html#method-i-add_convenience_method","(name_, pattern_, indexes_)","<p>Add a convenience method, providing a short cut for doing lookups in the\nregistry. You must provide a …\n"],["add_pattern","IDRegistry::Configuration","IDRegistry/Configuration.html#method-i-add_pattern","(*args_, &block_)","<p>Add a pattern to the configuration.\n<p>You may use one of the following call sequences:\n<p>add_pattern( pattern … &mdash; "],["all_categories","IDRegistry::Configuration","IDRegistry/Configuration.html#method-i-all_categories","()","<p>Returns an array of all category types known by this configuration.\n"],["all_convenience_methods","IDRegistry::Configuration","IDRegistry/Configuration.html#method-i-all_convenience_methods","()","<p>Returns an array of all convenience method names known by this\nconfiguration.\n"],["all_patterns","IDRegistry::Configuration","IDRegistry/Configuration.html#method-i-all_patterns","()","<p>Returns an array of all patterns known by this configuration.\n<p>The pattern arrays will be duplicates of …\n"],["all_types","IDRegistry::Configuration","IDRegistry/Configuration.html#method-i-all_types","()","<p>Returns an array of all object types known by this configuration.\n<p>Does not include any “anonymous” …\n"],["call","IDRegistry::RegistryMiddleware","IDRegistry/RegistryMiddleware.html#method-i-call","(env_)","<p>Wrap the Rack app with registry tasks.\n"],["categories","IDRegistry::Registry","IDRegistry/Registry.html#method-i-categories","(arg_)","<p>Return all the categories for the given object or tuple.\n<p>If you pass an Array, it is interpreted as a …\n"],["clear","IDRegistry::Configuration","IDRegistry/Configuration.html#method-i-clear","()","<p>Clear all configuration information, including all object types, patterns,\ncategories, and convenience …\n"],["clear","IDRegistry::Registry","IDRegistry/Registry.html#method-i-clear","()","<p>Clear out all cached objects from the registry.\n"],["clear_registry","IDRegistry::Railtie::Configuration","IDRegistry/Railtie/Configuration.html#method-i-clear_registry","(reg_, opts_={}, &condition_)","<p>Set up the middleware to clear the given registry after each request.\n<p>If you provide the optional block, …\n"],["config","IDRegistry::Registry","IDRegistry/Registry.html#method-i-config","(&block_)","<p>Get the configuration for this registry.\n<p>You may also configure this registry by providing a block. The …\n"],["create","IDRegistry","IDRegistry.html#method-c-create","(&block_)","<p>Create a new, empty registry with an empty configuration.\n<p>If you pass a block, it will be used to configure …\n"],["delete","IDRegistry::Registry","IDRegistry/Registry.html#method-i-delete","(arg_)","<p>Delete the given object.\n<p>If you pass an Array, it is interpreted as a tuple. If you pass something\nother …\n"],["delete_category","IDRegistry::Configuration","IDRegistry/Configuration.html#method-i-delete_category","(category_)","<p>Remove a category type by name.\n"],["delete_category","IDRegistry::Registry","IDRegistry/Registry.html#method-i-delete_category","(category_type_, *category_spec_)","<p>Delete all objects in a given category, which is specified by the category\ntype and the value array indicating …\n"],["delete_convenience_method","IDRegistry::Configuration","IDRegistry/Configuration.html#method-i-delete_convenience_method","(name_)","<p>Delete a convenience method by name.\n"],["delete_pattern","IDRegistry::Configuration","IDRegistry/Configuration.html#method-i-delete_pattern","(pattern_)","<p>Remove the given pattern from this configuration. Automatically removes the\nobject type if this is the …\n"],["delete_type","IDRegistry::Configuration","IDRegistry/Configuration.html#method-i-delete_type","(type_)","<p>Remove the given object type from this configuration. Automatically removes\nall patterns associated with …\n"],["get","IDRegistry::Registry","IDRegistry/Registry.html#method-i-get","(tuple_)","<p>Retrieve the cached object corresponding to the given tuple. Returns nil if\nthe object is not currently …\n"],["has_category?","IDRegistry::Configuration","IDRegistry/Configuration.html#method-i-has_category-3F","(category_)","<p>Returns true if this configuration includes the given category type.\n"],["has_convenience_method?","IDRegistry::Configuration","IDRegistry/Configuration.html#method-i-has_convenience_method-3F","(method_)","<p>Returns true if this configuration includes the given convenience method.\n"],["has_pattern?","IDRegistry::Configuration","IDRegistry/Configuration.html#method-i-has_pattern-3F","(pattern_)","<p>Returns true if this configuration includes the given pattern.\n"],["has_type?","IDRegistry::Configuration","IDRegistry/Configuration.html#method-i-has_type-3F","(type_)","<p>Returns true if this configuration includes the given object type.\n"],["include?","IDRegistry::Registry","IDRegistry/Registry.html#method-i-include-3F","(arg_)","<p>Returns true if the given object or tuple is present.\n<p>If you pass an Array, it is interpreted as a tuple. …\n"],["lock","IDRegistry::Configuration","IDRegistry/Configuration.html#method-i-lock","()","<p>Lock the configuration, preventing further changes.\n<p>This is called by registries when you start using …\n"],["locked?","IDRegistry::Configuration","IDRegistry/Configuration.html#method-i-locked-3F","()","<p>Returns true if this configuration has been locked. A locked configuration\ncan no longer be modified. …\n"],["lookup","IDRegistry::Registry","IDRegistry/Registry.html#method-i-lookup","(*args_)","<p>Get the object corresponding to the given tuple. If the tuple is not\npresent, the registry tries to generate …\n"],["matches?","IDRegistry::Utils","IDRegistry/Utils.html#method-c-matches-3F","(pattern_, tuple_)","<p>Returns true if the given pattern is matched by the given tuple.\n"],["new","IDRegistry::RegistryMiddleware","IDRegistry/RegistryMiddleware.html#method-c-new","(app_, tasks_=[], opts_={})","<p>Create a middleware.\n<p>After the required Rack app argument, provide an array of tasks.\n"],["new","IDRegistry::RegistryMiddleware::ClearRegistry","IDRegistry/RegistryMiddleware/ClearRegistry.html#method-c-new","(registry_, opts_={}, &condition_)","<p>Create a new ClearRegistry task. You must provide the registry and an\noptional condition block. If you …\n"],["new","IDRegistry::RegistryMiddleware::SpawnRegistry","IDRegistry/RegistryMiddleware/SpawnRegistry.html#method-c-new","(template_, envkey_)","<p>Create a new ClearRegistry task. You must provide a locked template\nconfiguration and a key into the …\n"],["objects_in_category","IDRegistry::Registry","IDRegistry/Registry.html#method-i-objects_in_category","(category_type_, *category_spec_)","<p>Return all objects in a given category, which is specified by the category\ntype and the value array indicating …\n"],["pattern","IDRegistry::PatternAdder","IDRegistry/PatternAdder.html#method-i-pattern","(value_=nil)","<p>Set the pattern to add\n"],["patterns_for_type","IDRegistry::Configuration","IDRegistry/Configuration.html#method-i-patterns_for_type","(type_)","<p>Returns an array of patterns corresponding to the given object type.\nReturns the empty array if the given …\n"],["post","IDRegistry::RegistryMiddleware::ClearRegistry","IDRegistry/RegistryMiddleware/ClearRegistry.html#method-i-post","(env_)","<p>The pre method applies if <code>:before_request</code> is not set.\n"],["post","IDRegistry::RegistryMiddleware::SpawnRegistry","IDRegistry/RegistryMiddleware/SpawnRegistry.html#method-i-post","(env_)","<p>The post method for this task clears the spawned registry.\n"],["pre","IDRegistry::RegistryMiddleware::ClearRegistry","IDRegistry/RegistryMiddleware/ClearRegistry.html#method-i-pre","(env_)","<p>The pre method applies if <code>:before_request</code> is set.\n"],["pre","IDRegistry::RegistryMiddleware::SpawnRegistry","IDRegistry/RegistryMiddleware/SpawnRegistry.html#method-i-pre","(env_)","<p>The pre method for this task creates a new registry.\n"],["registry","IDRegistry::Configuration","IDRegistry/Configuration.html#method-i-registry","()","<p>Returns the registry that owns this configuration.\n"],["rekey","IDRegistry::Registry","IDRegistry/Registry.html#method-i-rekey","(arg_)","<p>Recompute the tuples for the given object, which may be identified by\nobject or tuple. Call this when …\n"],["size","IDRegistry::Registry","IDRegistry/Registry.html#method-i-size","()","<p>Return the number of objects cached in the registry.\n"],["spawn_registry","IDRegistry::Configuration","IDRegistry/Configuration.html#method-i-spawn_registry","(opts_={})","<p>Create a new empty registry, duplicating this configuration.\n<p>If the <code>:unlocked</code> option is set to true, the …\n"],["spawn_registry","IDRegistry::Railtie::Configuration","IDRegistry/Railtie/Configuration.html#method-i-spawn_registry","(template_, envkey_)","<p>Set up the middleware to spawn a new registry on each request, using the\ngiven locked configuration as …\n"],["spawn_registry","IDRegistry::Registry","IDRegistry/Registry.html#method-i-spawn_registry","(opts_={})","<p>Create a new empty registry, duplicating this registry’s configuration.\n<p>If the <code>:unlocked</code> option is set …\n"],["to_generate_object","IDRegistry::PatternAdder","IDRegistry/PatternAdder.html#method-i-to_generate_object","(&block_)","<p>Provide a block to call to generate the appropriate object given a tuple.\nThis block is called when the …\n"],["to_generate_tuple","IDRegistry::PatternAdder","IDRegistry/PatternAdder.html#method-i-to_generate_tuple","(&block_)","<p>Provide a block to call to generate the tuple corresponding to an object.\nThe repository calls this block …\n"],["tuples_for","IDRegistry::Registry","IDRegistry/Registry.html#method-i-tuples_for","(arg_)","<p>Returns an array of all tuples corresponding to the given object, or the\nobject identified by the given …\n"],["tuples_in_category","IDRegistry::Registry","IDRegistry/Registry.html#method-i-tuples_in_category","(category_type_, *category_spec_)","<p>Return all tuples in a given category, which is specified by the category\ntype and the value array indicating …\n"],["type","IDRegistry::PatternAdder","IDRegistry/PatternAdder.html#method-i-type","(value_=nil)","<p>Set the object type\n"],["type_for_pattern","IDRegistry::Configuration","IDRegistry/Configuration.html#method-i-type_for_pattern","(pattern_)","<p>Returns the object type corresponding to the given pattern. Returns nil if\nthe given pattern is not recognized. …\n"],["History","","History_rdoc.html","","<p>0.1.2 / 2012-08-03\n<p>Added :before_request option to ClearRegistry middleware task.\n\n<p>0.1.1 / 2012-08-01\n"],["IDRegistry","","IDRegistry_rdoc.html","","<p>IDRegistry\n<p>IDRegistry is a generic object generator and identity map for Ruby.\n<p>This document provides an …\n"],["README","","README_rdoc.html","","<p>IDRegistry\n<p>IDRegistry is a generic object generator and identity map for Ruby.\n<p>Introduction to IDRegistry …\n"]]}}